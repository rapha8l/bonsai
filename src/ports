# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# ports                  http://github.com/bonsai-linux/bonsai
# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# vi:syntax=sh
# shellcheck shell=sh
# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

search() {
    find "$PORTS" -type f -path "*/*$1*/pkgfile" | while read -r pkgfile ; do
        dir="${pkgfile%/*}"
        echo "${dir##*/}"
    done | sort
}

# loads pkgfile for given $1, and assigns $name=$1
load_pkgfile() {
    name="$1"
    pkg="$PKGS/$name"
    pkgfile="$(getpkgfile $name)"
    export pkg name pkgfile
    [ -f "$pkgfile" ] || die "failed to load $name's pkgfile"
    . "$pkgfile"
    if ismetapkg "$name" ; then
        version=metapkg
        nostrip=true
    fi
    : "${source:=none}" "${version:=unknown}"
    pkgid="$name$DELIM$version"
    pkgworkdir="$WORK/$name"
    export version source pkgid pkgworkdir nostrip sha512 sha256
}

unload_pkgfile() {
    unset name pkgfile pkgid version source depends pkgdeps deps makedeps \
          pkgworkdir nolink nostrip sha512 sha256 LIBS
    unset -f prebuild build postbuild
}

# returns if given $name is a metapkg
ismetapkg() {
    grep -x 'metapkg=true' "$(getpkgfile "$1")" >/dev/null
    return $?
}

portcat() {
    cat "$(getpkgfile "$1")" 2>/dev/null || die "could not find $1's pkgfile"
}

# calculates dependencies of a $name and stores
# them in $pkgdeps in the correct installation order
pkgdeps() {
    arg=$1
    dep_recurse() {
        unset deps
        [ -f "$(getpkgfile "$1")" ] || die "could not source $1's pkgfile"
        . "$(getpkgfile "$1")"

        # recurse and find the dep's deps, skipping if already in list
        for dep in $deps ; do
            contains "$pkgdeps" " $dep " || dep_recurse $dep
        done

        # check if dep is not the main package stored in $arg
        [ $1 = $arg ] || pkgdeps=" $pkgdeps $1 "
    }
    dep_recurse "$arg"

    # remove extraneous whitespaces
    set -- $pkgdeps
    export pkgdeps="$*"

    unset dep deps arg
}

# show what packages depend on given port
# params: $name
rdeps() {
    # echo all packages that list $1 in their $deps
    depends() {
        find "$PORTS" -name pkgfile | while read -r _pkgfile ; do
            deps=""
            . "$_pkgfile"
            for dep in $deps ; do
                [ "$dep" = "$1" ] && echo "$_pkgfile"
            done
        done
    }
    deps="$(depends "$1")"

    for dep in $deps ; do
        deps="$deps $(depends "$dep")"
    done
   
    # 1. remove duplicates and white space
    # 2. convert $root/src/ports/$name/pkgfile -> $name
    set -- $(\
        for dep in $deps ; do
            printf '%s\n' $(basename $(dirname $dep)) $@
        done | sort -u \
    )
    msg "$*"
    unset deps dep
}

# print info about a given $name
portinfo() {
    [ -z "$1" ] && die "info(): no argument provided"
    name="$1"
    [ -f "$(getpkgfile $name)" ] || die "addpkg(): could not source $name's pkgfile"
    . "$(getpkgfile $name)"
    printf "%s\n%s\n%s\n%s\n%s\n" \
        "name:    $name" \
        "info:    ${info:=?}" \
        "version: ${version:=unknown}" \
        "source:  ${source:=?}" \
        "depends: ${deps:=none}"
    unset name name info version source deps 
}

# tar up a package for release / distribution, placing result in $PWD
# Notes: We force delim to be '-' here, this is to ensure web
#        compatbility. (Ex: cannot have '#' natively in URLs)
# params: $name
pack() {
    # requires 'pack()' tar xz
    isinst xz >/dev/null || die "xz required"
    isinst "$1" >/dev/null || die "$1 is not installed"
    [ -d "$PKGS/$1" ] || die "$1 was not found in \$pkgs"
    file="$(pkg2pkgid "$1" | sed "s/$DELIM/-/")".tar.xz
    { tar -C "$PKGS" -cf - "$1" | xz -T 0 -z - > "$file" ; } || \
        die "failed to compress $1"
    msg "successfully packed $1 as ./$file"

}

# untar a downloaded binary package and install it.
# params: $pack
unpack() {
    # lint tarball - must conform to name-version.tar.xz
    echo "$*" | grep -E -- '.*.-.*.tar.xz' >/dev/null || die "incorrect pack format"
    # must also not contain any spaces
    echo "$*" | grep -F -- ' ' >/dev/null && die "incorrect pack format"

    pkgid="${1%.tar.xz}"
    name="${pkgid%-*}"
    version="${pkgid#$name-}"

    # clear any work from possible existing build
    # todo: should this be $work?
    rm -rf "${WORK:?}/${1:?}" 2>/dev/null ||:

    # check if is already installed
    isinst "$name" >/dev/null && die "port $name is already installed"

    # unpack
    { decompress "$1" | tar -C "$PKGS" -xf - ; } || die "failed to decompress $1"

    # this is to be fixed later, for now:
    case "$name" in kernel|syslinux) nolink=true ; esac

    # link and install
    installpkg "$name" || die "$name failed to install"
    unload_pkgfile
}
